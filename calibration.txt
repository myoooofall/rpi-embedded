#define IMU_DATA_LENGTH 256
#include <thread>
#include <chrono>
#include <iostream>
#include "mraa/common.hpp"
#include "mraa/uart.hpp"
#include <vector>
#include <algorithm>
#include <iomanip>

    // 缓冲区用于存储读取的数据
    //uint8_t*buffer;
uint8_t buffer[IMU_DATA_LENGTH] = {0};
uint8_t read_command[5]={0xFF, 0xAA, 0x27, 0x24, 0x00};//读取寄存器数据 其中第三位是读取寄存器 第四位是要读的寄存器 修改第四位即可
uint8_t unlock_command[5]={0xFF, 0xAA, 0x69, 0x88, 0xB5};//解锁指令 不必修改
uint8_t write_command[5]={0xFF, 0xAA, 0x01, 0x04, 0x00};//写入的指令 根据协议修改 
uint8_t save_command[5]={0xFF, 0xAA, 0x00, 0x00, 0x00};//保存指令 不必修改
uint8_t enter_cali_command[5]={0xFF, 0xAA, 0x01, 0x07, 0x00};
uint8_t exit_cali_command[5]={0xFF, 0xAA, 0x01, 0x00, 0x00};

uint8_t acc_command[5]={0xFF, 0xAA, 0x01, 0x01, 0x00};
uint8_t angle_command[5]={0xFF, 0xAA, 0x01, 0x08, 0x00};
uint8_t change_command[5]={0xFF, 0xAA, 0x24, 0x01, 0x00};
uint8_t z_to_0_command[5]={0xFF, 0xAA, 0x01, 0x04, 0x00};

uint8_t shit_command[5]={0xFF, 0xAA, 0x00, 0x00, 0x01};

int read_imu_raw(mraa::Uart* uart);
int read_imu_command(mraa::Uart* uart);
int read_imu(mraa::Uart* uart);
bool sumcrc(uint8_t* data) ;
struct imu_data {
        float acc_x;
        float acc_y;
        float acc_z;
        float T_degree;
        float omega_x;  // degree/s
        float omega_y;
        float omega_z;
        float voltage;
        float theta_x;
        float theta_y;
        float theta_z;
        float version;
    } imu_status;
void printHex(const uint8_t* data, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(data[i]) << " ";
    }
    std::cout << std::dec << std::endl;
}
void read_addr(mraa::Uart* uart){
    std::string buff_str(read_command, read_command+5);
    uart->writeStr(buff_str);
}

void write_addr(mraa::Uart* uart){
    std::string buff_str1(unlock_command, unlock_command+5);
    uart->writeStr(buff_str1);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    std::string buff_str2(write_command, write_command+5);
    uart->writeStr(buff_str2);
    std::this_thread::sleep_for(std::chrono::milliseconds(3000));
    std::string buff_str3(save_command, save_command+5);
    uart->writeStr(buff_str3);

}

void back_to_initial(mraa::Uart* uart){
    std::string buff_str1(unlock_command, unlock_command+5);
    uart->writeStr(buff_str1);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    std::string buff_str2(shit_command, shit_command+5);
    uart->writeStr(buff_str2);
    std::this_thread::sleep_for(std::chrono::milliseconds(3000));
    std::string buff_str3(save_command, save_command+5);
    uart->writeStr(buff_str3);
}
void acc_cal(mraa::Uart* uart){
    std::string buff_str1(unlock_command, unlock_command+5);
    uart->writeStr(buff_str1);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    std::string buff_str2(acc_command, acc_command+5);
    uart->writeStr(buff_str2);
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    std::string buff_str3(save_command, save_command+5);
    uart->writeStr(buff_str3);

}

void angle_cal(mraa::Uart* uart){
    std::string buff_str1(unlock_command, unlock_command+5);
    uart->writeStr(buff_str1);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    std::string buff_str2(angle_command, angle_command+5);
    uart->writeStr(buff_str2);
    std::this_thread::sleep_for(std::chrono::milliseconds(3000));
    std::string buff_str3(save_command, save_command+5);
    uart->writeStr(buff_str3);

}

void z_to_0(mraa::Uart* uart){
    std::string buff_str1(unlock_command, unlock_command+5);
    uart->writeStr(buff_str1);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    std::string buff_str2(z_to_0_command, z_to_0_command+5);
    uart->writeStr(buff_str2);
    std::this_thread::sleep_for(std::chrono::milliseconds(3000));
    std::string buff_str3(save_command, save_command+5);
    uart->writeStr(buff_str3);
}

void change_9_6(mraa::Uart* uart){
      std::string buff_str1(unlock_command, unlock_command+5);
    uart->writeStr(buff_str1);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    std::string buff_str2(change_command, change_command+5);
    uart->writeStr(buff_str2);
    std::this_thread::sleep_for(std::chrono::milliseconds(3000));
    std::string buff_str3(save_command, save_command+5);
    uart->writeStr(buff_str3);
}
void write_addr_single(mraa::Uart* uart,uint8_t* buff){
    std::string buff_str(buff, buff+5);
    uart->writeStr(buff_str);
}

void nine_axis_calibration(mraa::Uart* uart){
    write_addr_single(uart,unlock_command);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    write_addr_single(uart,enter_cali_command);
    std::this_thread::sleep_for(std::chrono::milliseconds(60000));
    write_addr_single(uart,exit_cali_command);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    write_addr_single(uart,save_command);
    std::cout<<"initial calibration is done!"<<std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    acc_cal(uart);
    std::cout<<"accleration calibration is done!"<<std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    angle_cal(uart);
    std::cout<<"angle calibration is done!"<<std::endl;
}


void six_axis_calibration(mraa::Uart* uart){
    std::cout<<"changing the 9 to 6"<<std::endl;
    int flag=0;
    change_9_6(uart);
     while (true) {
        // 从串口读取数据
        flag++;
       read_addr(uart);
       std::this_thread::sleep_for(std::chrono::milliseconds(10));
       if(read_imu_command(uart)) break;
       std::this_thread::sleep_for(std::chrono::milliseconds(10));
       if(flag>1000){
        std::cout<<"cannot change the axis algorithm"<<std::endl;
        return ;
     }
     }

    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    // std::cout<<"changing done!"<<std::endl;
    std::cout<<"calibrate z to 0"<<std::endl;
    z_to_0(uart);
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    std::cout<<"z is 0 currently!"<<std::endl;
    std::cout<<"accleration calibration is doing"<<std::endl;
    acc_cal(uart);
    std::cout<<"accleration calibration is done!"<<std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    std::cout<<"angle calibration is doing"<<std::endl;
    angle_cal(uart);
    std::cout<<"angle calibration is done!"<<std::endl;

}

void check_data(mraa::Uart* uart){
    int flag =0;
    while(true){
    read_imu(uart);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    if(imu_status.theta_z<0.02&&imu_status.theta_z>-0.02) break;
    if(flag++>50){
        std::cout<<"failed!!!!"<<std::endl;
        return;
    } 
    }
    std::cout<<"the imu data is successfully calibrated!!!!"<<std::endl;
}
int main() {
    // 初始化串口
    mraa::Uart *uart=new mraa::Uart ("/dev/ttyAMA0");
    uart->setBaudRate(921600);
    uart->setFlowcontrol(false, true);
    // uart->setMode(8,mraa::UART_PARITY_NONE , 0);
    // uart->setTimeout(10,10,10);
    // back_to_initial(uart);
    // six_axis_calibration(uart);
    // check_data(uart);
    write_addr(uart);
    // while (true) {
    //     // 从串口读取数据
    //    read_addr(uart);
    //    std::this_thread::sleep_for(std::chrono::milliseconds(10));
    //    read_imu_command(uart);
    //    std::this_thread::sleep_for(std::chrono::milliseconds(10));
    //  }
    // six_axis_calibration(uart);

    return 0;
}

int read_imu_command(mraa::Uart* uart){
    int length = read_imu_raw(uart);
    std::vector<uint8_t> data(buffer, buffer + length);
    std::vector<uint8_t> pattern_command = {0x55, 0x5F};
    std::vector<uint8_t>::iterator it = std::search(data.begin(), data.end(), pattern_command.begin(), pattern_command.end());
        if (it != data.end()) {
            size_t index = std::distance(data.begin(), it);
            // ESP_LOGI("imu", "imu acc found at index %d", index);
            // SUMCRC=0x55+TYPE+DATA1L+DATA1H+DATA2L+DATA2H+DATA3L+DATA3H+DATA4L+DATA4H
            uint8_t crc_data[11];
            std::copy(it, it+11, crc_data);
            if(!sumcrc(crc_data)) {
                 std::cout<<"imu theta crc error"<<std::endl;
            } else {
               
                int is_six=int(data[index + 2]);
                if(is_six){
                    std::cout<<"successfully changed "<<std::endl;
                    return is_six;
                }
                
                 std::cout<<"successfully found the data you need"<<std::endl;
            }
        } else{
                std::cout<<"cannotfound the data you need"<<std::endl;
            }
        return 0;

}
int read_imu(mraa::Uart* uart) {
    int length = read_imu_raw(uart);
    std::vector<uint8_t> data(buffer, buffer + length);
    
    std::vector<uint8_t> pattern_acc = {0x55, 0x51};
    std::vector<uint8_t> pattern_omega = {0x55, 0x52};
    std::vector<uint8_t> pattern_theta = {0x55, 0x53};
    {
        std::vector<uint8_t>::iterator it = std::search(data.begin(), data.end(), pattern_acc.begin(), pattern_acc.end());
        if (it != data.end()) {
            size_t index = std::distance(data.begin(), it);
            // ESP_LOGI("imu", "imu acc found at index %d", index);
            // SUMCRC=0x55+TYPE+DATA1L+DATA1H+DATA2L+DATA2H+DATA3L+DATA3H+DATA4L+DATA4H
            uint8_t crc_data[11];
            std::copy(it, it+11, crc_data);
            if(!sumcrc(crc_data)) {
                 std::cout<<"imu theta crc error"<<std::endl;
            } else {
                // TODO: calculate acc
                imu_status.acc_x = (short)(((short)data[index + 3] << 8) | data[index + 2]) / 32768.0 * 16 * 9.8;
                imu_status.acc_y = (short)(((short)data[index + 5] << 8) | data[index + 4]) / 32768.0 * 16 * 9.8;
                imu_status.acc_z = (short)(((short)data[index + 7] << 8) | data[index + 6]) / 32768.0 * 16 * 9.8;
                imu_status.T_degree = (short)(((short)data[index + 9] << 8) | data[index + 8]) / 32768.0 * 96.38 + 36.53;
                // ESP_LOGE("imu", "imu acc_x_raw: %d, %d, %d, %d", data[index+0], data[index + 1], data[index + 2], data[index + 3]);
                // ESP_LOGI("imu", "imu acc: %f, %f, %f, %f", imu_status.acc_x, imu_status.acc_y, imu_status.acc_z, imu_status.T_degree);
            }
        } else {
            std::cout<<"imu acc not found"<<std::endl;
        }
    }
    {
        std::vector<uint8_t>::iterator it = std::search(data.begin(), data.end(), pattern_omega.begin(), pattern_omega.end());
        if (it != data.end()) {
            size_t index = std::distance(data.begin(), it);
            uint8_t crc_data[11];
            std::copy(it, it+11, crc_data);
            if(!sumcrc(crc_data)) {
                std::cout<<"imu theta crc error"<<std::endl;
            } else {
                imu_status.omega_x = (short)(((short)data[index + 3] << 8) | data[index + 2]) / 32768.0 * 2000;
                imu_status.omega_y = (short)(((short)data[index + 5] << 8) | data[index + 4]) / 32768.0 * 2000;
                imu_status.omega_z = (short)(((short)data[index + 7] << 8) | data[index + 6]) / 32768.0 * 2000;
                imu_status.voltage = (short)(((short)data[index + 9] << 8) | data[index + 8]) / 100.0;
            }
        } else {
           std::cout<<"imu acc not found"<<std::endl;
        }
    }
    {
        std::vector<uint8_t>::iterator it = std::search(data.begin(), data.end(), pattern_theta.begin(), pattern_theta.end());
        if (it != data.end()) {
            size_t index = std::distance(data.begin(), it);
            uint8_t crc_data[11];
            std::copy(it, it+11, crc_data);
            if(!sumcrc(crc_data)) {
                std::cout<<"imu theta crc error"<<std::endl;
            } else {
                imu_status.theta_x = (short)(((short)data[index + 3] << 8) | data[index + 2]) / 32768.0 * 180;
                imu_status.theta_y = (short)(((short)data[index + 5] << 8) | data[index + 4]) / 32768.0 * 180;
                imu_status.theta_z = (short)(((short)data[index + 7] << 8) | data[index + 6]) / 32768.0 * 180;
                imu_status.version = (short)(((short)data[index + 9] << 8) | data[index + 8]);
            }
        } else {
            std::cout<<"imu acc not found"<<std::endl;
        }
    }
    return length;
}

int read_imu_raw(mraa::Uart* uart) {
    std::string buff_str = uart->readStr(IMU_DATA_LENGTH);
    int length=buff_str.size();
    if(length > IMU_DATA_LENGTH) length= IMU_DATA_LENGTH;
    if(length==IMU_DATA_LENGTH){
        std::cout<<"get status num: "<<IMU_DATA_LENGTH <<std::endl;
    }
    else if(length<IMU_DATA_LENGTH){
        std::cout<<"get status num: "<<length<<std::endl;
    }
    std::copy(buff_str.begin(), buff_str.begin()+IMU_DATA_LENGTH, buffer);    
    printHex(buffer, length);
    return length;
}

bool sumcrc(uint8_t* data) {
            uint16_t sum = 0x0;
            for (size_t i = 0; i < 10; i++) {
                sum += data[i];  // 累加数据
            }
            uint8_t crc = sum & 0xFF;  // 取校验和的低8位
            // ESP_LOGD("imu crc", "sumcrc: %d, real: %d", crc, data[10]);
            return (crc == data[10]);
        }